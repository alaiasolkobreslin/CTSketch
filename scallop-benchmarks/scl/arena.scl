// Input from neural networks
type grid_node(x: usize, y: usize)
type curr_position(x: usize, y: usize)
type goal_position(x: usize, y: usize)
type is_enemy(x: usize, y: usize)

// Basic connectivity
rel node(x, y) = grid_node(x, y), not is_enemy(x, y)
rel edge(x, y, x, yp, 0) = node(x, y), node(x, yp), yp == y + 1 // Up
rel edge(x, y, xp, y, 1) = node(x, y), node(xp, y), xp == x + 1 // Right
rel edge(x, y, x, yp, 2) = node(x, y), node(x, yp), yp == y - 1 // Down
rel edge(x, y, xp, y, 3) = node(x, y), node(xp, y), xp == x - 1 // Left

// Path for connectivity; will condition on no enemy on the path
rel path(x, y, x, y) = node(x, y)
rel path(x, y, xp, yp) = edge(x, y, xp, yp, _)
rel path(x, y, xpp, ypp) = path(x, y, xp, yp), edge(xp, yp, xpp, ypp, _)

// Get the next position
rel next_position(a, xp, yp) = curr_position(x, y), edge(x, y, xp, yp, a)
rel action_score(a) = next_position(a, x, y), goal_position(gx, gy), path(x, y, gx, gy)
